/*
 * Build script configuration
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                'com.google.protobuf:protobuf-gradle-plugin:0.8.4@jar',
                'com.google.gradle:osdetector-gradle-plugin:1.4.0@jar',
                'com.google.guava:guava:18.0@jar',
                'commons-lang:commons-lang:2.6@jar',
                'kr.motd.maven:os-maven-plugin:1.5.0.Final@jar',
        )
    }
}
/*
 * Plugins configurations
 */
plugins {
    id 'project-report'
}
/*
 * Root-project only configuration
 */
description = 'A minimal viable transaction oriented middleware approach.'
apply from: 'settings/dependencies.gradle'
apply from: 'settings/groups.gradle'
apply from: 'settings/ide-eclipse.gradle'
apply from: 'settings/ide-idea.gradle'
task clean(type:Delete, group:'build') {
    description = 'Deletes the build directory.'
    delete project.buildDir
}
/*
 * Common configuration for all projects
 */
allprojects {
    project.ext.build = new SAGBuild(project)
    defaultTasks 'assemble'
    configurations.all {
        resolutionStrategy {
            // Cache dynamic versions for $project.sag.ttl seconds
            cacheDynamicVersionsFor project.sag.ttl, 'seconds'
            cacheChangingModulesFor project.sag.ttl, 'seconds'
        }
    }
    // We care mostly about the dependency report for projects that actually publish something to the repository
    project.plugins.withType( BasePlugin.class) {
        project.apply plugin: 'project-report'
    }
    repositories {
        mavenCentral()
    }
}
/*
 * Helper classes.
 */
public class SAGBuild {
    private final Project project
    public SAGBuild(Project project) { this.project = project }
    public int number = getProjectProperty(project, 'build.number', 0)
    public String version = "${getProjectProperty(project, 'build.version.major', 0)}.${getProjectProperty(project, 'build.version.minor', 0)}.${getProjectProperty(project, 'build.version.micro', 0)}.${getProjectProperty(project, 'build.patch', 0)}"
    public String getInstallerVersion() { return "$version.$number" }
    private static int getProjectProperty(Project project, String propertyName, int defaultValue) {
        project.hasProperty(propertyName) ? Integer.parseInt((String) project.property(propertyName)) : defaultValue
    }
}
