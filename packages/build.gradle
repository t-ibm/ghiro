description = 'Integration Server packages'
/*
 * Build script configuration
 */
buildscript {
    repositories {
        ivy {
            name = 'sag-central'
            layout 'maven'
            url = 'http://bas.eur.ad.sag:8081/artifactory/build-snapshot'
        }
    }
    dependencies {
        classpath "com.softwareag.bas:bas-plugins-is:$project.sag.bas.version@jar"
        classpath group:'com.softwareag.mom.is', name:'is-server', version:project.sag.is.version, configuration:'nodeutil'
    }
}
/*
 * Project specific configuration
 */
task clean(type:Delete, group:'build') {
    description = 'Deletes the build directory.'
    delete project.buildDir
}
/*
 * Project domain specific configuration
 */
subprojects {
    apply from: "$project.rootDir/settings/java.gradle"
    apply from: "$project.rootDir/settings/groovy.gradle"
    apply plugin: IntegrationServerPackagePlugin
    configurations {
        nodeutil {
            visible = false
        }
        providedCompile {
            description = 'Additional compile classpath for modules provided by the Integration Server.'
        }
        providedRuntime {
            description = 'Additional runtime classpath for modules provided by the Integration Server.'
            extendsFrom providedCompile
        }
        testCompile.extendsFrom providedCompile
        testRuntime.extendsFrom providedRuntime
    }
    repositories {
        ivy {
            name = 'sag-central'
            layout 'maven'
            url = 'http://bas.eur.ad.sag:8081/artifactory/build-snapshot'
        }
    }
    dependencies {
        nodeutil group:'com.softwareag.mom.is', name:'is-server', version:project.sag.is.version, configuration:'nodeutil'
        providedCompile project.sag.module.is.compile
        testCompile project(path:":modules:$project.rootProject.name-core", configuration:'testFixtureRuntime')
        testRuntime project.sag.module.is.runtime
    }
    sourceSets {
        main {
            compileClasspath += project.configurations.providedCompile
            runtimeClasspath += project.configurations.providedRuntime
        }
    }
    frag {
        nodeUtilClasspath = project.configurations.nodeutil
    }
    task syncPkg(type: Sync, dependsOn: assemble, group: 'IS instance') {
        description = 'Synchronizes the IS package build results to the IS instance directory.'
        project.afterEvaluate { //Need to evaluate sub-projects first to get the archive path right
            into new File( project.sag.is.rootDir, "packages/$project.label")
            from zipTree( project.tasks.pkg.archivePath)
        }
    }
}
/*
 * Additional plugin types
 */
class IntegrationServerPackagePlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('is-pkg', com.softwareag.bas.is.plugins.IntegrationServerPackagePluginExtension, project)
        project.ext.label = ''        
        project.tasks.create('frag', com.softwareag.bas.is.tasks.Frag) {
            from 'src/main/java'
        }
        project.tasks.create('pkg', com.softwareag.bas.is.tasks.bundling.IntegrationServerPackage) {
            dependsOn project.tasks.frag
            duplicatesStrategy org.gradle.api.file.DuplicatesStrategy.FAIL
            from extension.pkgDir
            docFiles extension.docDir
        }
        project.tasks.assemble.dependsOn project.tasks.pkg
    }
}
