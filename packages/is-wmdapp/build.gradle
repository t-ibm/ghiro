project.label = 'WmDApp'
project.description = "Provides support for Distributed Applications"

dependencies {
    implementation(
        project(path:":modules:$project.rootProject.name-core", configuration:'runtimeElements'),
        project(path:":modules:$project.rootProject.name-contract", configuration:'runtimeElements'),
        project(path:":modules:$project.rootProject.name-protocol", configuration:'runtimeElements'),
    )
    compileOnly project.sag.module.protobuf
    runtimeOnly project.sag.module.grpc.runtime
    testImplementation project(path:":modules:$project.rootProject.name-protocol", configuration:'testFixtureRuntimeElements')
    testRuntimeOnly(
        project.sag.module.httpcomponents,
        project.sag.module.jmx,
    )
}

pkg {
    provideClasspath project.sourceSets.main.runtimeClasspath - project.configurations.compileOnly + project.tasks.jar
    manifest.values(
        'name': project.label,
        'description': project.description,
        'node' : 'production',
        'classloader' : 'package',
    )
    into('code/classes') {
        from(project(":modules:$project.rootProject.name-core").sourceSets.testFixture.resources) { include 'Node.yaml' }
    }
}
