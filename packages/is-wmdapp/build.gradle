project.label = 'WmDApp'
project.description = "Provides support for Distributed Applications"

dependencies {
    compile (project(":modules:$project.rootProject.name-contract")) { transitive = false }
    compile (project(":modules:$project.rootProject.name-core")) { transitive = false }
    compile (project(":modules:$project.rootProject.name-protocol")) { transitive = false }
    compile(
        project.sag.module.protobuf,
        project.sag.module.rx,
    )
    runtime project.sag.module.crypto
    testCompile project(path:":modules:$project.rootProject.name-protocol", configuration:'testFixtureRuntime')
    testRuntime(
        project(":modules:$project.rootProject.name-contract"),
        project(":modules:$project.rootProject.name-protocol"),
    )
}

pkg {
    provideClasspath project.sourceSets.main.runtimeClasspath - project.configurations.providedRuntime + project.tasks.jar
    manifest.values(
        'name': project.label,
        'description': project.description,
        'node' : 'production',
        'classloader' : 'package',
    )
    into('code/classes') {
        from(project(":modules:$project.rootProject.name-core").sourceSets.testFixture.resources) { include 'Node.yaml' }
    }
}
