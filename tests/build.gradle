description = 'Inter-module level integration tests'
/*
 * Common runtime configuration
 */
project.sag.startActionBurrow = {
    workingDir project.tasks.initBurrow.destinationDir
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', 'burrow', 'start', '--validator=0'
    } else {
        commandLine 'burrow', 'start', '--validator=0'
    }
    standardOutput new FileOutputStream("$project.tasks.initBurrow.destinationDir/std.out")
    errorOutput new FileOutputStream("$project.tasks.initBurrow.destinationDir/err.out")
    project.logger.lifecycle("$path See directory '${project.uri(project.projectDir).relativize(project.uri(project.tasks.initBurrow.destinationDir))}' for the logging output.")
}
/*
 * Integration test fixture configuration
 */
task clean(type:Delete, group:'test fixture') {
    description = 'Cleans up the Burrow node.'
    delete project.buildDir
}
task initBurrow(type:Sync, group:'test fixture') {
    description = 'Initializes a new Burrow node.'
    from 'src/integTest/fixture/burrow'
    into file("$project.buildDir/workingDir")
    doLast { new File( destinationDir, '.burrow/config').mkdirs() }
}
task runBurrow(type:Exec, group:'test fixture', dependsOn:project.tasks.initBurrow) {
    description = 'Starts a new Burrow process.'
    doFirst project.sag.startActionBurrow
}
task spawnBurrow(type:SpawnTask, group:'test fixture', dependsOn:project.tasks.initBurrow) {
    description = 'Starts a new Burrow process and continues task execution.'
    doLast {
        project.logger.info("$path Waiting for startup to complete.")
        Thread.currentThread().sleep(5*1000)
    }
}
/*
 * Project domain specific configuration
 */
subprojects {
    apply from: "$project.rootDir/settings/java-base.gradle"
    apply from: "$project.rootDir/settings/groovy-base.gradle"
    /*
     * Add integration test source set etc.
     */
    sourceSets {
        integTest
    }
    task integTest(type: Test) {
        description = 'Runs the integration tests.'
        group = JavaBasePlugin.VERIFICATION_GROUP
        testClassesDirs = sourceSets.integTest.output.classesDirs
        classpath = sourceSets.integTest.runtimeClasspath

        systemProperty 'node', System.getProperty('node')
    }
    project.tasks.assemble.dependsOn integTestClasses
    /*
     * Common integration test dependencies
     */
    dependencies {
        integTestImplementation project(path:":modules:$project.rootProject.name-core", configuration:'testFixtureRuntimeElements')
    }
    /*
     * Add to the consolidated JaCoCo report
     */
    apply from: "$project.rootDir/settings/jacoco.gradle"
    project.rootProject.tasks.jacocoMerge.dependsOn project.tasks.integTest
    project.rootProject.tasks.jacocoMerge.executionData project.tasks.integTest.jacoco.destinationFile
    /*
     * Add to the code quality configuration
     */
    sonarqube.properties {
        properties(
            'sonar.tests' : project.sourceSets.integTest.allSource.srcDirs.findAll { File f -> f.exists() },
            'sonar.coverage.jacoco.xmlReportPaths' : project.rootProject.tasks.jacocoMergeReport.reports.xml.destination,
        )
    }
}
/*
 * Additional task types
 */
class SpawnTask extends DefaultTask {
    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(2)
    @TaskAction def run() {
        executor.execute({
            try {
                project.logger.info("$path Submitting task $project.tasks.runBurrow.path asynchronously.")
                project.exec project.sag.startActionBurrow
            }
            catch (TaskExecutionException e) {
                project.logger.info("$path Task '$project.tasks.runBurrow.path' interrupted.")
            }
        } as Runnable)
    }
}
