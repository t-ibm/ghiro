syntax = "proto3";
package com.softwareag.tom.protocol.abi;
/*
 * Code Types.
 */
enum CodeType {
    OK                          = 0;
    
    // General response codes, 1 ~ 99
    InternalError               = 1;
    EncodingError               = 2;
    BadNonce                    = 3;
    Unauthorized                = 4;
    InsufficientFunds           = 5;
    UnknownRequest              = 6;
}
/*
 * Block Types.
 */
message BlockHeightType {
    oneof value {
        bytes height = 1;
        BlockStateType state = 2;
    }
}
enum BlockStateType {
    earliest = 0;
    latest = 1;
    pending = 2;
}
/*
 * Transaction Types.
 */
message TxType {
    bytes from = 1;
    bytes to = 2;
    bytes data = 3;
    bytes gas = 4;
    bytes gasPrice = 5;
    bytes value = 6;
    bytes nonce = 7;
}
message TxReceiptType {
    bytes status = 1;
    bytes transactionHash = 2;
    bytes transactionIndex = 3;
    bytes blockHash = 4;
    bytes blockNumber = 5;
    bytes cumulativeGasUsed = 6;
    bytes gasUsed = 7;
    bytes contractAddress = 8;
    repeated FilterLogType logs = 9;
}
/*
 * Filter Types.
 */
message FilterOptionType {
    BlockHeightType fromBlock = 1;
    BlockHeightType toBlock = 2;
    bytes address = 3;
    repeated bytes topic = 4;
}
message FilterLogType {
    bool removed = 1;
    bytes logIndex = 2;
    bytes transactionIndex = 3;
    bytes transactionHash = 4;
    bytes blockHash = 5;
    bytes blockNumber = 6;
    bytes address = 7;
    bytes data = 8;
    repeated bytes topic = 9;
}
message FilterEventType {
    oneof event {
        FilterLogType log = 1;
    }
}
/*
 * Request Types.
 */
message Request {
    oneof value {
        RequestWeb3ClientVersion web3ClientVersion = 1;
        RequestNetListening netListening = 2;
        RequestEthGetBalance ethGetBalance = 3;
        RequestEthGetStorageAt ethGetStorageAt = 4;
        RequestEthSendTransaction ethSendTransaction = 5;
        RequestEthCall ethCall = 6;
        RequestEthNewFilter ethNewFilter = 7;
        RequestEthNewBlockFilter ethNewBlockFilter = 8;
        RequestEthUninstallFilter ethUninstallFilter = 9;
        RequestEthGetFilterChanges ethGetFilterChanges = 10;
        RequestEthGetTransactionReceipt ethGetTransactionReceipt = 11;
    }
}
message RequestWeb3ClientVersion {
}
message RequestNetListening {
}
message RequestEthGetBalance {
    bytes address = 1;
    BlockHeightType block = 2;
}
message RequestEthGetStorageAt {
    bytes address = 1;
    bytes position = 2;
    BlockHeightType block = 3;
}
message RequestEthSendTransaction {
    TxType tx = 1;
}
message RequestEthCall {
    TxType tx = 1;
    BlockHeightType block = 2;
}
message RequestEthNewFilter {
    FilterOptionType options = 1;
}
message RequestEthNewBlockFilter {
}
message RequestEthUninstallFilter {
    bytes id = 1;
}
message RequestEthGetFilterChanges {
    bytes id = 1;
}
message RequestEthGetTransactionReceipt {
    bytes hash = 1;
}
/*
 * Response Types.
 */
message Response {
    oneof value {
        ResponseException exception = 1;
        ResponseWeb3ClientVersion web3ClientVersion = 2;
        ResponseNetListening netListening = 3;
        ResponseEthGetBalance ethGetBalance = 4;
        ResponseEthGetStorageAt ethGetStorageAt = 5;
        ResponseEthSendTransaction ethSendTransaction = 6;
        ResponseEthCall ethCall = 7;
        ResponseEthNewFilter ethNewFilter = 8;
        ResponseEthUninstallFilter ethUninstallFilter = 9;
        ResponseEthGetFilterChanges ethGetFilterChanges = 10;
        ResponseEthGetTransactionReceipt ethGetTransactionReceipt = 11;
    }
}
message ResponseException {
    CodeType code = 1;
    string message = 2;
    bytes data = 3;
}
message ResponseWeb3ClientVersion {
    string version = 1;
}
message ResponseNetListening {
    bool listening = 1;
}
message ResponseEthGetBalance {
    bytes balance = 1;
}
message ResponseEthGetStorageAt {
    bytes value = 1;
}
message ResponseEthSendTransaction {
    bytes hash = 1;
}
message ResponseEthCall {
    bytes return = 1;
}
message ResponseEthNewFilter {
    bytes id = 1;
}
message ResponseEthUninstallFilter {
    bool removed = 1;
}
message ResponseEthGetFilterChanges {
    repeated FilterEventType event = 1;
}
message ResponseEthGetTransactionReceipt {
    TxReceiptType txReceipt = 1;
}
/*
 * Service Definition.
 */
service AbiService {
    rpc web3ClientVersion(RequestWeb3ClientVersion) returns (ResponseWeb3ClientVersion);
    rpc netListening(RequestNetListening) returns (ResponseNetListening);
    rpc ethGetBalance(RequestEthGetBalance) returns (ResponseEthGetBalance);
    rpc ethGetStorageAt(RequestEthGetStorageAt) returns (ResponseEthGetStorageAt);
    rpc ethSendTransaction(RequestEthSendTransaction) returns (ResponseEthSendTransaction);
    rpc ethCall(RequestEthCall) returns (ResponseEthCall);
    rpc ethNewFilter(RequestEthNewFilter) returns (ResponseEthNewFilter);
    rpc ethNewBlockFilter(RequestEthNewBlockFilter) returns (ResponseEthNewFilter);
    rpc ethUninstallFilter(RequestEthUninstallFilter) returns (ResponseEthUninstallFilter);
    rpc ethGetFilterChanges(RequestEthGetFilterChanges) returns (ResponseEthGetFilterChanges);
    rpc ethGetTransactionReceipt(RequestEthGetTransactionReceipt) returns (ResponseEthGetTransactionReceipt);
}
