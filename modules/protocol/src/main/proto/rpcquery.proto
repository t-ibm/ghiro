syntax = 'proto3';

package rpcquery;

option go_package = "github.com/hyperledger/burrow/rpc/rpcquery";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/tendermint/tendermint/abci/types/types.proto";

import "names.proto";
import "acm.proto";
import "validator.proto";
import "registry.proto";
import "rpc.proto";
import "payload.proto";

option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service Query {
    rpc Status (StatusParam) returns (rpc.ResultStatus);
    rpc GetAccount (GetAccountParam) returns (acm.Account);
    rpc GetMetadata (GetMetadataParam) returns (MetadataResult);
    rpc GetStorage (GetStorageParam) returns (StorageValue);

    rpc ListAccounts (ListAccountsParam) returns (stream acm.Account);

    rpc GetName (GetNameParam) returns (names.Entry);
    rpc ListNames (ListNamesParam) returns (stream names.Entry);
    
    // GetNetworkRegistry returns for each validator address, the list of their identified node at the current state
    rpc GetNetworkRegistry (GetNetworkRegistryParam) returns (NetworkRegistry);
    rpc GetValidatorSet (GetValidatorSetParam) returns (ValidatorSet);
    rpc GetValidatorSetHistory (GetValidatorSetHistoryParam) returns (ValidatorSetHistory);

    rpc GetProposal(GetProposalParam) returns (payload.Ballot);
    rpc ListProposals(ListProposalsParam) returns (stream ProposalResult);

    rpc GetStats(GetStatsParam) returns (Stats);

    rpc GetBlockHeader(GetBlockParam) returns (types.Header);
}

message StatusParam {
    string BlockTimeWithin = 1;
    string BlockSeenTimeWithin = 2;
}

message GetAccountParam {
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
}

message GetMetadataParam {
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address"];
    bytes MetadataHash = 2 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes"];
}

message MetadataResult {
    string Metadata = 1;
}

message GetStorageParam {
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
    bytes Key = 2 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.Word256", (gogoproto.nullable) = false];
}

message StorageValue {
    bytes Value = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes", (gogoproto.nullable) = false];
}

message ListAccountsParam {
    string Query = 1;
}

message GetNameParam {
    string Name = 1;
}

message ListNamesParam {
    string Query = 1;
}

message GetNetworkRegistryParam {

}

message GetValidatorSetParam {

}

message GetValidatorSetHistoryParam {
    // Use -1 for all available history
    int64 IncludePrevious = 1;
}

message NetworkRegistry {
    repeated RegisteredValidator Set = 1;
}

message RegisteredValidator {
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
    registry.NodeIdentity Node = 2;
}

message ValidatorSetHistory {
    repeated ValidatorSet History = 1;
}

message ValidatorSet {
    uint64 height = 1;
    repeated validator.Validator Set = 2;
}

message GetProposalParam {
    bytes Hash = 1;
}

message ListProposalsParam {
    bool Proposed = 1;
}

message ProposalResult {
    bytes Hash = 1;
    payload.Ballot Ballot = 2;
}

message GetStatsParam {

}

message Stats {
    uint64 AccountsWithCode = 1;
    uint64 AccountsWithoutCode = 2;
}

message GetBlockParam {
    uint64 Height = 1;
}
