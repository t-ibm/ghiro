description = "The $project.name module"

dependencies {
    compile(
        project.sag.modules.slf4j.api,
    )
    runtime project.sag.modules.slf4j.impl
    testCompile project.sag.modules.spock
}

task solc(type:SolidityCompile) {
    description = 'Compiles Solidity contracts and generates the corresponding bin and abi files.'
}
project.tasks.processResources.dependsOn project.tasks.solc

import org.ethereum.solidity.compiler.SolidityCompiler
import org.ethereum.solidity.compiler.CompilationResult
import static org.ethereum.solidity.compiler.SolidityCompiler.Options.*
class SolidityCompile extends DefaultTask {
    private FileCollection sourceFiles = project.fileTree('src/test/solidity');
    private File outputDir = project.file("$project.buildDir/solc");

    public void setSourceFiles(FileCollection sourceFiles) { this.sourceFiles = sourceFiles }
    public void setOutputDir(File outputDir) { this.outputDir = outputDir }

    @InputFiles public FileCollection getSourceFiles() { this.sourceFiles }
    @OutputDirectory public File getOutputDir() { this.outputDir }

    @TaskAction public void compile() {
        sourceFiles.each { file ->
            SolidityCompiler.Result res = SolidityCompiler.compile( file, true, ABI, BIN, INTERFACE, METADATA)
            if (res.errors != null && res.errors.length() > 0) {
                throw new GradleException(res.errors)
            } else {
                project.logger.info("$path::result == $res.output")
            }
            CompilationResult result = CompilationResult.parse(res.output)
            result.contracts.each { String contractKey, CompilationResult.ContractMetadata contractMetadata ->
                File solFile = new File(contractKey.substring(0, contractKey.lastIndexOf(':')))
                if (solFile.exists() && solFile.canonicalFile == file.canonicalFile) {
                    File abiFile = new File("$outputDir/${solFile.name.replace('.sol', '.abi')}")
                    abiFile.write contractMetadata.abi
                    File binFile = new File("$outputDir/${solFile.name.replace('.sol', '.bin')}")
                    binFile.write contractMetadata.bin
                }
            }
        }
    }
}